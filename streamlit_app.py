import streamlit as st
from transformers import GPT2Tokenizer, GPT2LMHeadModel
import torch
import nltk
from nltk.util import ngrams
from nltk.probability import FreqDist
import plotly.express as px
from collections import Counter
from nltk.corpus import stopwords
import string

# Download necessary NLTK data
nltk.download('punkt')
nltk.download('stopwords')

# load gpt2 tokenizer and model
tokenizer = GPT2Tokenizer.from_pretrained("gpt2")
model = GPT2LMHeadModel.from_pretrained("gpt2")

def calculate_perplexity(text):
    encoded_input = tokenizer.encode(text, add_special_tokens=False, return_tensors="pt")
    input_ids = encoded_input[0]

    with torch.no_grad():
        output = model(input_ids)
        logits = output.logits
    
    # Use torch.nn.functional.cross_entropy instead of torch.nn.cross_entropy
    loss = torch.nn.functional.cross_entropy(logits.view(-1, logits.size(-1)), input_ids.view(-1))
    perplexity = torch.exp(loss)
    return perplexity.item()

def calculate_burstiness(text):
    tokens = nltk.word_tokenize(text.lower())
    word_freq = FreqDist(tokens)
    repeated_count = sum(count > 1 for count in word_freq.values())
    burstiness_score = repeated_count / len(word_freq)
    return burstiness_score

def plot_top_repeated_words(text):
    tokens = text.lower().split()
    stop_words = set(stopwords.words('english'))
    tokens = [word for word in tokens if word not in stop_words and word not in string.punctuation]
    # count
    words_counts = Counter(tokens)
    top_words = words_counts.most_common(10)
    words = [word for word, _ in top_words]
    counts = [count for _, count in top_words]

    # plot
    fig = px.bar(x=words, y=counts, labels={'x':'Words', 'y':'Count'}, title="Top Repeated Words")
    st.plotly_chart(fig, use_container_width=True)


st.set_page_config(page_title="GPT Content Detector", page_icon="🔍", layout="wide", initial_sidebar_state="expanded")

st.title("AI Content Detector")

text_area = st.text_area("Enter text here", height=200)

if text_area is not None:
    if st.button("Analyse"): 
        col1, col2, col3 = st.columns([1, 1, 1])

        with col1:
            st.info("Your Input Text")
            st.success(text_area)

        with col2:
            st.info("Calculated Score")
            perplexity = calculate_perplexity(text_area)
            burstiness_score = calculate_burstiness(text_area)

            st.success(f"Perplexity Score: {perplexity}")
            st.success(f"Burstiness Score: {burstiness_score}")

            if perplexity > 30000 and burstiness_score < 0.2: 
                st.error("Text Analysis Result: AI Generated Content")
            else: 
                st.success("Text Analysis Result: Likely not AI Generated Content")
            st.warning("Disclaimer: This analysis is based on simple heuristics and should not be considered definitive. Factors such as the complexity of the text, the domain of the content, and the training data of the AI being analyzed can significantly influence the results. This tool is intended for preliminary analysis and may not accurately reflect whether content was generated by AI or a human. Always consider using multiple methods and tools for a more comprehensive assessment.")
        
        with col3:
            st.info("Basic Insights")
            plot_top_repeated_words(text_area)
